#!/usr/bin/env python
# -*- coding: utf-8 -*-
import os, sys, argparse, math

adjs = [
    'aged', 'ancient', 'autumn', 'billowing', 'bitter', 'black', 'blue', 'bold',
    'broken', 'cold', 'cool', 'crimson', 'damp', 'dark', 'dawn', 'delicate',
    'divine', 'dry', 'empty', 'falling', 'floral', 'fragrant', 'frosty',
    'green', 'hidden', 'holy', 'icy', 'late', 'lingering', 'little', 'lively',
    'long', 'misty', 'morning', 'muddy', 'nameless', 'old', 'patient',
    'polished', 'proud', 'purple', 'quiet', 'red', 'restless', 'rough', 'shy',
    'silent', 'small', 'snowy', 'solitary', 'sparkling', 'spring', 'still',
    'summer', 'throbbing', 'twilight', 'wandering', 'weathered', 'white',
    'wild', 'winter', 'wispy', 'withered', 'young'
]

nouns = [
    'bird', 'breeze', 'brook', 'bush', 'butterfly', 'chamber', 'chasm',
    'cherry', 'cliff', 'cloud', 'darkness', 'dawn', 'dew', 'dream', 'dust',
    'eye', 'feather', 'field', 'fire', 'firefly', 'flower', 'foam', 'fog',
    'forest', 'frog', 'frost', 'glade', 'glitter', 'grass', 'hand', 'haze',
    'hill', 'horizon', 'lake', 'leaf', 'lily', 'meadow', 'mist', 'moon',
    'morning', 'mountain', 'night', 'paper', 'pebble', 'pine', 'planet',
    'plateau', 'pond', 'rain', 'resonance', 'ridge', 'ring', 'river', 'sea',
    'shadow', 'shape', 'silence', 'sky', 'smoke', 'snow', 'snowflake', 'sound',
    'star', 'stream', 'sun', 'sunset', 'surf', 'thunder', 'tome', 'tree',
    'violet', 'voice', 'water', 'waterfall', 'wave', 'wildflower', 'wind',
    'wood'
]


def rescale(x, old_min, old_max, new_min, new_max):
    return (x - old_min) * (new_max - new_min) / (old_max - old_min) + new_min


def clamp(x, min_val, max_val):
    return min(max(x, min_val), max_val)


def rangerand(min_val, max_val):
    ran = int(os.urandom(2).encode('hex'), 16)
    return clamp(rescale(ran, 0, 65535, min_val, max_val), min_val, max_val)


def hexrand(nbytes):
    return os.urandom(nbytes).encode('hex')


def generate_suffix(length, use_hex=False):
    if use_hex:
        bytes = int(math.ceil(length/2.0) * 2)
        return hexrand(bytes)[0:length]

    min_val = math.pow(10, length - 1)
    max_val = math.pow(10, length) - 1
    return str(int(rangerand(min_val, max_val)))


def config():
    parser = argparse.ArgumentParser(
        description='Generate a Heroku-style names'
    )
    parser.add_argument('length', metavar='length', type=int, nargs='?',
                        default=5, help='length of the numeric suffix')
    parser.add_argument('-x', '--hex', help='hexadecimal suffix',
                        dest='hex_suffix', action='store_true')
    return parser.parse_args()


def generate_haiku(length=5, hex_suffix=False):
    adjective = adjs[rangerand(0, len(adjs))]
    noun = nouns[rangerand(0, len(nouns))]
    suffix = generate_suffix(length, hex_suffix)

    return "{}-{}-{}".format(
        adjs[rangerand(0, len(adjs))],
        nouns[rangerand(0, len(nouns))],
        suffix
    )


if __name__ == '__main__':
    args = config()
    print generate_haiku(**args.__dict__)
